If atleat one commit being made in a local git repository we can use the command 'git branch' this will show us all the branches in the repository and at which branch the header pointer is. Git iniitially allocate the branch master and the head pointer points to it.
To get to another branch we first make them by 'git branch branchName' and to get to that use 'git checkout branchName'. To both things together use 'git checkout -b branchName'. In place of checkout we can also use switch. But in th last case use "git switch -c branchName"
A branch is simply like a time line on which we work at different times. Thus when we are on branch we can't access the files of another branch directly to get those files we use merging.
Branches decleared are alternative timeline to one another but will be at the same piont when just declared and no work has been done to them. Once we will start working on one particular branch and do  some work in it it will move. If we declare a file in one branch and the move to another then the file will be gone. And thus commiting before going to another branch is important otherwise you will lose the work.
In case we want to merge a branch into amother first make sure that you are at thebranch to which you want another branch to get merged. Then use 'git merge branchName' This will merge the work done in the branch from when it was created or last time commited to master into master. After that you may keep the side branch and can keep working on that but those works will not be reflected in the branch in hich this was merged and if we want to delete the branch we use 'git branch -d branchName' but yo should be at he branch in which it was merged 
Conflicts arise in merging when we merge two branches having the same file in that case first we will have to reolve conflict manually and the merge and then click to resolve conflict -> then click complete merge. 